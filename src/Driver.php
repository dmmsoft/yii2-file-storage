<?php
/**
 * Created by PhpStorm.
 * User: Lenovo
 * Date: 2017/3/2
 * Time: 11:19
 */

namespace dungang\storage;


use yii\base\Behavior;
use yii\base\Component;
use yii\helpers\BaseFileHelper;
use yii\httpclient\Exception;
use yii\web\UploadedFile;

abstract class Driver extends Component
{
    const EVENT_BEFORE_INIT_UPLOADER = 'beforeInitUploader';
    const EVENT_BEFORE_WRITE_FILE = 'beforeWriteFile';
    const EVENT_AFTER_WRITE_FILE = 'afterWriteFile';
    const EVENT_BEFORE_DELETE_FILE = 'beforeDeleteFile';
    const EVENT_AFTER_DELETE_FILE = 'afterDeleteFile';

    public $config;


    /**
     * @var string 文件表单字段名称
     */
    public $fieldName = 'file';

    /**
     * @var string 文件名称
     */
    public $name = '';

    /**
     * @var string 文件类型
     */
    public $type = '';

    /**
     * @var string 文件最后修改的时间
     */
    public $lastModifiedDate = '';

    /**
     * @var bool 是否分片上传文件
     */
    public $chunked = false;

    /**
     * @var int chunk总数量
     */
    public $chunks = 1;

    /**
     * @var int 当前chunk编号
     */
    public $chunk = 0;

    /**
     * @var int chunk的大小  5 * 1024 * 1024 = 5M
     */
    public $chunkSize = 5242880;

    /**
     * @var int 当前文件大小
     */
    public $size = 0;

    /**
     * @var int chunk实际上传大小
     */
    public $chunkFileSize = 0;

    /**
     * @var string 回话id
     */
    public $guid = '';

    /**
     * @var string 文件唯一id WU_FILE_0
     */
    public $id;

    /**
     * @var UploadedFile
     */
    public $file;

    /**
     * @var string 文件保存路径
     */
    public $saveDir = 'upload/storage';


    /**
     * @var mixed 额外的参数
     */
    public $extraData = '{}';


    /**
     * @var array 接受的文件类型
     */
    public $accept;


    /**
     * @var StorageEvent
     */
    protected $event;

    /**
     * @var bool 是否可以触发事件
     */
    protected $triggerEvent = true;

    protected $_eTag = '';

    public $_driverName = '';

    public static $_drivers;


    public static function createDefaultDriver()
    {
        if(empty(\Yii::$app->params['storage']) ||
            empty(\Yii::$app->params['storage']['defaultDriver'])) {
            $driverName = 'local';
        } else {
            $driverName = \Yii::$app->params['storage']['defaultDriver'];
        }
        return self::factory($driverName);
    }

    public static function factory($driverName)
    {
        if (!empty(self::$_drivers[$driverName])) {
            return self::$_drivers[$driverName];
        }
        if(empty(\Yii::$app->params['storage']) ||
            empty(\Yii::$app->params['storage']['drivers']) ||
            empty(\Yii::$app->params['storage']['drivers'][$driverName]) ||
            empty(\Yii::$app->params['storage']['drivers'][$driverName]['class'])) {
            $driver =  \Yii::createObject([
                'class'=>'dungang\storage\driver\Local',
                '_driverName'=>'local',
                'saveDir'=>'upload/storage'
            ]);
        } else {
            $params = \Yii::$app->params['storage']['drivers'][$driverName];
            $class = $params['class'];
            $driver =  \Yii::createObject([
                'class'=>$class,
                '_driverName'=>$driverName,
                'saveDir'=> isset($params['saveDir'])?$params['saveDir']:'upload/storage',
                'config' => $params
            ]);
        }

        if (!empty(\Yii::$app->params['storage']) && !empty(\Yii::$app->params['storage']['behaviors']))
        {
            $behaviors = \Yii::$app->params['storage']['behaviors'];
            if(is_string($behaviors)) {
                $behaviors = explode(',',$behaviors);
            } else if (!is_array($behaviors)) {
                $behaviors = [];
            }
            foreach ($behaviors as $behavior) {
                if (class_exists($behavior)) {
                    /* @var $behavior Behavior*/
                    $behavior = new $behavior();
                    $behavior->attach($driver);
                }
            }
        }
        self::$_drivers[$driverName] = $driver;
        return $driver;
    }


    /**
     * final的目的是防止被覆盖
     */
    public final function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->event = new StorageEvent();
        $this->initUploader();
    }

    /**
     * 上传驱动的初始化方法
     */
    public function initUploader(){}


    public function loadPostData($post)
    {
        $props = get_object_vars($this);

        foreach($props as $prop=>$def) {
            if (isset($post[$prop])) {
                $this->$prop = $post[$prop];
            } else {
                $this->$prop = $def;
            }
        }
        if (empty($this->extraData)) {
            $this->extraData = [];
        } else {
            $this->extraData = json_decode($this->extraData, JSON_UNESCAPED_UNICODE);
        }

        if (intval($this->chunks) > 0 && intval($this->size) > intval($this->chunkSize)) {
            $this->chunked = true;
        }
    }


    /**
     *  主要用在上传文件初始化，删除文件不需要。
     */
    public function initFile()
    {
        $this->file = UploadedFile::getInstanceByName($this->fieldName);
        $this->chunkFileSize = $this->file->size;
    }


    public function message($code)
    {
        switch($code){
            case UPLOAD_ERR_INI_SIZE:
            case UPLOAD_ERR_FORM_SIZE:
                $err =  '上传的文件大小超出了限制';
                break;
            case UPLOAD_ERR_PARTIAL:
                $err = '文件未完整上传';
                break;
            case UPLOAD_ERR_NO_FILE:
                $err = '没有找到上传文件';
                break;
            case UPLOAD_ERR_NO_TMP_DIR:
                $err = "找不到临时文件夹";
                break;
            case UPLOAD_ERR_CANT_WRITE:
                $err = "文件写入失败";
                break;
            case UPLOAD_ERR_EXTENSION:
                $err = "文件停止了上传";
                break;
            default:
                $err = '不明错误！';
        }
        return $err;
    }

    /**
     * @param $file \yii\web\UploadedFile
     * @return bool
     */
    protected function checkExtension($file) {
        //如果是数组，则必须按照列表检查
        if (is_array($this->accept)) {
            if (in_array($file->extension,$this->accept)) {
                return true;
            }
            return false;
        }
        //如果不是数组，则不检查文件后缀
        return true;
    }

    /**
     * @return array|mixed
     */
    public function save()
    {
        $this->initFile();
        if ($this->file->error === 0) {
            if ($this->checkExtension($this->file)) {
                $this->beforeWrite();
                $rst = $this->writeFile();
                if ($rst['code'] == 0) {
                    $fileObj = new File();
                    $fileObj->name = $this->file->name;
                    $fileObj->extension = $this->file->extension;
                    $fileObj->object = $rst['object'];
                    $fileObj->provider = $this->_driverName;
                    $fileObj->eTag = $this->_eTag;
                    $fileObj->url = $this->getBindUrl($rst['object']);
                    $this->afterWrite($fileObj);
                    return $this->response($fileObj);
                }

                return  $this->response(
                    null,
                    500,
                    '服务器错误'
                );
            }else {
                return $this->response(
                    null,
                    401,
                    '不允许上传'.$this->file->extension.'格式的文件'
                );
            }
        } else {
            return $this->response(
                null,
                100 + $this->file->error,
                $this->message($this->file->error)
            );
        }

    }


    public static function parseObjectPath($object)
    {
        $path = parse_url($object,PHP_URL_PATH);
        $path = ltrim($path,'\/');
        $parts = explode('/',$path);
        if (count($parts)>=2) {
            return [
                'driverName'=>$parts[0],
                'object'=>$path,
            ];
        } else {
            return [
                'driverName'=>'local',
                'object'=>$path,
            ];
        }
    }


    public static function deleteObject($object)
    {
        $objectInfo = self::parseObjectPath($object);
        /* @var $driver Driver*/
        $driver = self::factory($objectInfo['driverName']);
        $file = new File();
        $file->object = $objectInfo['object'];
        $file->provider = $objectInfo['driverName'];
        $file->url = $object;

        return $driver->delete($file);
    }


    /**
     * @param $file File
     * @return mixed
     */
    public function delete($file)
    {
        $this->beforeDelete();
        $object = BaseFileHelper::normalizePath(ltrim($file->object, '/\\'), '/');
        $rst = $this->deleteFile($object);
        $this->afterDelete($file);
        return $rst;
    }

    public function beforeWrite()
    {
        $this->triggerEvent &&
        $this->trigger(self::EVENT_BEFORE_WRITE_FILE,$this->event);
    }

    /**
     * @param $fileInfo File
     */
    public function afterWrite($fileInfo)
    {
        if ($this->triggerEvent) {
            $this->event->file = $fileInfo;
            $this->trigger(self::EVENT_AFTER_WRITE_FILE,$this->event);
        }

    }


    public function beforeDelete()
    {
        $this->trigger(self::EVENT_BEFORE_DELETE_FILE,$this->event);
    }

    public function afterDelete($fileInfo)
    {
        $this->event->file = $fileInfo;
        $this->trigger(self::EVENT_AFTER_DELETE_FILE,$this->event);

    }

    /**
     * @return mixed
     */
    abstract public function writeFile();

    /**
     * @param $file string
     * @return mixed
     */
    abstract public function deleteFile($file);

    /**
     * 获取原始的对象访问地址
     * @param $object
     * @return string|null|false;
     */
    abstract public function getSourceUrl($object);


    /**
     * 获取绑定域名的对象访问地址
     * @param $object
     * @return string|null|false;
     */
    abstract public function getBindUrl($object);


    /**
     * @param null|string|File $object
     * @param int $code
     * @param null $message
     * @return array
     */
    public function response($object=null,$code=0,$message=null)
    {
        return [
            'code'=>$code,
            'message'=>$message,
            'object' => $object,
        ];
    }

    /**
     * @return string 生产guid
     */
    static public function guid() {
        $charid = strtoupper(md5(uniqid(mt_rand(), true)));
        $hyphen = chr(45);// "-"
        $uuid = chr(123)// "{"
            .substr($charid, 0, 8).$hyphen
            .substr($charid, 8, 4).$hyphen
            .substr($charid,12, 4).$hyphen
            .substr($charid,16, 4).$hyphen
            .substr($charid,20,12)
            .chr(125);// "}"
        return $uuid;
    }
}